/** Class that represents clients.
 * properties luggageWeight and registerFirst describe  
 * how much luggage the client has and whether they want the first 
 * priority boarding
 * @author Anastasia
 */
public class Client {
	
	private String name;
	private int luggageWeight;
	private boolean registerFirst;
	
	/** Constructor for Client; 
	 * @param name - for establishing the client's name
	 */
	public Client (String name)	{
		setName(name);
	}
	
	//getters and setters
	
	public String getName() {
		return name;
	}
	
	public void setName(String clientName) {
		name=clientName;
	}
	
	public int getLuggageWeight() {
		return luggageWeight;
	}
	
	public void setLuggageWeight(int clientLuggageWeight) {
		luggageWeight=clientLuggageWeight;
	}
	
	public boolean getRegisterFirst() {
		return registerFirst;
	}
	
	public void setRegisterFirst(boolean clientRegisterFirst) {
		registerFirst=clientRegisterFirst;
	}
	
	//important methods
	
	/** Method for ordering the ticket - creating the ticket object 
	 * with a set price; 
	 * @param flightInfo - Flight type object with information about the flight; 
	 * @param luggageWeight - the amount of client's luggage; 
	 * @param registerFirst - whether the client requested the first priority boarding; 
	 * @return
	 */
	public Ticket orderTicket(Flight flightInfo, int luggageWeight, boolean registerFirst) {
		
		Ticket ticket = new Ticket();
		
		if (flightInfo.getSeatsLeft()!=0)
		{
			ticket.setFlight(flightInfo);
			ticket.setPrice(flightInfo, luggageWeight, registerFirst);
			System.out.println("The ticket is ordered");
			System.out.println("The price is " + ticket.getPrice());			
		}
		else
		{
			System.out.println("There are no seats left on this flight");
		}
		
		return ticket;
	}
	
	/**Method for paying for the ticket; 
	 * !currently i have no idea how it should be done (bank transaction???); 
	 * @param ticket - information about the ticket the client is paying for
	 */
	public void payForTicket(Ticket ticket) {
		//bank transaction???
		
		ticket.setPaidFor(true);
				
		System.out.print("The ticket is paid for");
	}

	//Overridden methods (automatically generated)
	
	/* Overridden hashCode(); 
	 * will always return the same result; 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + luggageWeight;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + (registerFirst ? 1231 : 1237);
		return result;
	}

	/* Overridden equals(): 
	 * compare the properties of the objects; 
	 * and some other stuff; 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Client other = (Client) obj;
		if (luggageWeight != other.luggageWeight)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (registerFirst != other.registerFirst)
			return false;
		return true;
	}
	
	/* Overridden toString(): 
	 * returns some info about the object parameters in a string; 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Client [name=" + name + ", luggageWeight=" + luggageWeight 
				+ ", registerFirst=" + registerFirst + "]";
	}

	

}
