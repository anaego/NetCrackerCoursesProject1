package airlineinfo;

import java.util.Comparator;
import java.util.GregorianCalendar;

import main.IncorrectValueException;

/** Class Flight represents a flight that the client can choose.
 * properties: date - flight date, seatsLeft - how many 
 * seats are left; plane - the name of the plane model. 
 * @author Anastasia
 */
public class Flight {
	
	private GregorianCalendar date;
	private String plane;
	private int seatsLeft;
	private String destination;
	
	private Order order;
	
	/** static variable for object counting
	 */
	public static int counter;
	
	
	/* Flight constructor: 
	 * for initializing some flight info 
	 * and also for counting objects of type Flight
	 */
	public Flight(GregorianCalendar flightDate, int flightSeatsLeft, String plane, 
			String flightDestination) throws IncorrectValueException {
		setDate(flightDate);
		setSeatsLeft(flightSeatsLeft);
		setPlane(plane);
		setDestination(flightDestination);
		
		counter++;
	}
	
	//getters and setters
	
	public Order getOrder() {
		return order;
	}

	public void setOrder(Order order) {
		try {
			this.order = order;
			if (this.order == null)
					throw new IncorrectValueException("Incorrect order value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}

	public String getPlane() {
		if (plane!=null)
			return plane;
		else
			return "unknown plane";
	}

	public void setPlane(String plane) {
		this.plane = plane;
	}

	public GregorianCalendar getDate() {
		return date;
	}
	
	public void setDate(GregorianCalendar flightDate) {
		try {
			date=flightDate;
			if (date.before( new GregorianCalendar() ))
					throw new IncorrectValueException("You can't set an old flight date!" 
							+ " Please change the flight date.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}
	
	public int getSeatsLeft() {
		return seatsLeft;
	}
	
	public void setSeatsLeft(int flightSeatsLeft) {
		try {
			seatsLeft=flightSeatsLeft;
			if (seatsLeft <= 0)
					throw new IncorrectValueException("Incorrect seatsLeft value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}
	
	public String getDestination() {
		return destination;
	}

	public void setDestination(String destination) {
		this.destination = destination;
	}
	
	//Overridden methods (automatically generated)

	/* Overridden hashCode(): 
	 * will always return the same result; 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + ((plane == null) ? 0 : plane.hashCode());
		result = prime * result + seatsLeft;
		return result;
	}

	/* Overridden equals(): 
	 * compares the properties of the objects; 
	 * and some other stuff.
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Flight other = (Flight) obj;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (plane == null) {
			if (other.plane != null)
				return false;
		} else if (!plane.equals(other.plane))
			return false;
		if (seatsLeft != other.seatsLeft)
			return false;
		return true;
	}

	/* Overridden toString():
	 * returns some info about the object parameters in a string
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Flight [date=" + date + ", plane=" + plane + ", seatsLeft=" + seatsLeft + "]";
	}
	
	
	
	
	public static Comparator<Flight> flightDestinationComparator
    = new Comparator<Flight>() {

		public int compare(Flight flight1, Flight flight2) {
			
			return flight1.getDestination().compareToIgnoreCase(flight2.getDestination());

		}

	};
	



	
	
	
}
