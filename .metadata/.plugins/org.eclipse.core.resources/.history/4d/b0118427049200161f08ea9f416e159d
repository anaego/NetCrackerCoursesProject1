import java.util.Date;

/** Class Flight represents a flight that the client can choose.
 * properties: date - flight date (and time), seatsLeft - how many seats are left; 
 * basicPrice - price for one ticket without any additions; 
 * minimumSeats, minimumDate - factors that, too, affect the price; 
 * luggagePrice - price for a kilogram of luggage; 
 * registerFirstPrice - price for the first priority boarding right; 
 * seatsFactorPrice, dateFactorPrice - coefficients for calculating additional price ; 
 * @author Anastasia
 */
public class Flight {
	
	private Date date;
	private int seatsLeft;
	private double basicPrice;
	
	private int minimumSeats;
	private Date maximumDate;
	
	private double luggagePrice;
	private float registerFirstPrice;
	private float seatsFactorPrice;
	private float dateFactorPrice;
	
	/* Flight constructor: 
	 * for initializing some flight info
	 */
	public Flight(Date flightDate, int flightSeatsLeft, double flightBasicPrice, 
			int minimumSeats, Date minimalDate, double luggagePrice,
			float registerFirstPrice, float seatsFactorPrice, float dateFactorPrice)
	{
		setDate(flightDate);
		setSeatsLeft(flightSeatsLeft);
		setBasicPrice(flightBasicPrice);
		
		setMinimumSeats(minimumSeats);
		setMinimalDate(minimalDate);
		
		setLuggagePrice(luggagePrice);
		setRegisterFirstPrice(registerFirstPrice);
		setSeatsFactorPrice(seatsFactorPrice);
		setDateFactorPrice(dateFactorPrice);
	}
	
	//getters and setters
	
	public Date getDate()
	{
		return date;
	}
	
	public void setDate(Date flightDate)
	{
		date=flightDate;
	}
	
	public int getSeatsLeft()
	{
		return seatsLeft;
	}
	
	public void setSeatsLeft(int flightSeatsLeft)
	{
		seatsLeft=flightSeatsLeft;
	}
	
	public double getBasicPrice()
	{
		return basicPrice;
	}
	
	public void setBasicPrice(double flightBasicPrice)
	{
		basicPrice=flightBasicPrice;
	}
	
	
	public double getLuggagePrice() 
	{
		return luggagePrice;
	}

	public void setLuggagePrice(double luggagePrice) 
	{
		this.luggagePrice = luggagePrice;
	}

	public float getRegisterFirstPrice() 
	{
		return registerFirstPrice;
	}

	public void setRegisterFirstPrice(float registerFirstPrice) 
	{
		this.registerFirstPrice = registerFirstPrice;
	}

	
	public int getMinimumSeats() {
		return minimumSeats;
	}

	public void setMinimumSeats(int minimumSeats) {
		this.minimumSeats = minimumSeats;
	}

	public Date getMaximumDate() {
		return maximumDate;
	}

	public void setMinimalDate(Date minimalDate) {
		this.maximumDate = minimalDate;
	}

	public float getSeatsFactorPrice() {
		return seatsFactorPrice;
	}

	public void setSeatsFactorPrice(float seatsFactorPrice) {
		this.seatsFactorPrice = seatsFactorPrice;
	}

	public float getDateFactorPrice() {
		return dateFactorPrice;
	}

	public void setDateFactorPrice(float dateFactorPrice) {
		this.dateFactorPrice = dateFactorPrice;
	}

	//Overridden methods (automatically generated)

	/* Overridden hashCode(): 
	 * will always return the same result; 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(basicPrice);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + seatsLeft;
		return result;
	}

	/* Overridden equals(): 
	 * compares the properties of the objects; 
	 * and some other stuff.
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Flight other = (Flight) obj;
		if (Double.doubleToLongBits(basicPrice) != Double.doubleToLongBits(other.basicPrice))
			return false;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (seatsLeft != other.seatsLeft)
			return false;
		return true;
	}

	/* Overridden toString():
	 * returns some info about the object parameters in a string
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Flight [date=" + date + ", seatsLeft=" + seatsLeft + ", basicPrice=" + basicPrice + "]";
	}
	
	
}
