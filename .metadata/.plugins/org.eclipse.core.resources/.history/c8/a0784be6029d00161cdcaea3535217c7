package airlineinfo;

import java.time.LocalDate;

import main.IncorrectValueException;

/** Abstract class that contains some necessary properties/methods 
 * for establishing price coefficients for some order and such.
 * Provide abstract method for calculating the price of an order. 
 * @author Anastasia
 */
abstract class OrderRelated {
	
	protected double basicPrice;
	
	protected int minimumSeats;
	protected LocalDate maximumDate;

	protected double luggagePrice;
	protected float registerFirstPrice;
	protected float seatsFactorPrice;
	protected float dateFactorPrice;
	
	
	//getters and setters
	
	public double getBasicPrice() {
		return basicPrice;
	}
	
	
	public void setBasicPrice(double flightBasicPrice) {
		try {
			basicPrice=flightBasicPrice;
			if (basicPrice <= 0.0d)
					throw new IncorrectValueException("Incorrect basicPrice value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}
	
	
	public double getLuggagePrice() {
		return luggagePrice;
	}

	public void setLuggagePrice(double luggagePrice) {
		try {
			this.luggagePrice = luggagePrice;
			if (this.luggagePrice <= 0.0d)
					throw new IncorrectValueException("Incorrect luggagePrice value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}

	public float getRegisterFirstPrice() {
		return registerFirstPrice;
	}

	public void setRegisterFirstPrice(float registerFirstPrice) {
		try {
			this.registerFirstPrice = registerFirstPrice;
			if (this.registerFirstPrice <= 0.0f)
					throw new IncorrectValueException("Incorrect registerFirstPrice value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}

	
	public int getMinimumSeats() {
		return minimumSeats;
	}

	public void setMinimumSeats(int minimumSeats) {
		try {
			this.minimumSeats = minimumSeats;
			if (this.minimumSeats <= 0)
					throw new IncorrectValueException("Incorrect minimumSeats value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}

	public LocalDate getMaximumDate() {
		return maximumDate;
	}

	public void setMaximumDate(LocalDate maximumDate) {
		this.maximumDate = maximumDate;
	}

	public float getSeatsFactorPrice() {
		return seatsFactorPrice;
	}

	public void setSeatsFactorPrice(float seatsFactorPrice) {
		try {
			this.seatsFactorPrice = seatsFactorPrice;
			if (this.seatsFactorPrice <= 0.0f)
					throw new IncorrectValueException("Incorrect seatsFactorPrice value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}

	public float getDateFactorPrice() {
		return dateFactorPrice;
	}

	public void setDateFactorPrice(float dateFactorPrice) {
		try {
			this.dateFactorPrice = seatsFactorPrice;
			if (this.dateFactorPrice <= 0.0f)
					throw new IncorrectValueException("Incorrect dateFactorPrice value." 
							+ " Please change it.");
		} catch(IncorrectValueException e) {
			System.out.println(e.getMessage());
		}
	}
	

	//for calculating the price, taking luggage and stuff into account
	public abstract double calculatePrice(int seatsLeft, int luggageWeight, boolean registerFirst);


}
